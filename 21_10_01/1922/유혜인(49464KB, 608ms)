import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {

	public static class Node implements Comparable<Node>{
		int start;
		int end;
		int weight;
		
		public Node(int start, int end, int weight) {
			this.start = start;
			this.end = end;
			this.weight = weight;
		}

		@Override
		public int compareTo(Node o) {
			return Integer.compare(this.weight, o.weight);
		}
		
		
	}
	
	static int[] p;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		int M = Integer.parseInt(br.readLine());
		
		ArrayList<Node> edges = new ArrayList<>();
		
		for(int i=0;i<M;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			edges.add(new Node(start, end, weight));
		}
		
		Collections.sort(edges);
		
		p = new int[N+1];
		
		for(int i=1;i<N+1;i++) {
			p[i] = i;
		}
		
		int sum = 0;
		int cnt = 0;
		for(Node node : edges) {
			if(union(node.start, node.end)) {
				sum += node.weight;
				if(++cnt == N-1)	break;
			}
			
		}
		
		System.out.println(sum);
		
		
	}
	private static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		if(aRoot == bRoot)	return false;
		p[bRoot] = aRoot;
		return true;
	}
	private static int find(int a) {
		if(a == p[a])	return a;
		return p[a] = find(p[a]);
	}

}
