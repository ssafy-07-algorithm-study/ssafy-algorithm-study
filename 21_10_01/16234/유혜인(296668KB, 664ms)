import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static boolean[][] visited;
	static int[] dx = {-1,1,0,0};
	static int[] dy = {0,0,-1,1};
	static int N,L,R;
	static int[][] map;
	static int count, sum;
	static List<int[]> country;
 	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());

		map = new int[N][N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		int open = 0;
		boolean flag;
		while (true) {
			visited = new boolean[N][N];
			flag = false;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (visited[i][j])	continue;
					if(open(i,j))	flag = true;
				}
			}
		
			if(flag)	open++;
			else	 break;
			
		}
		System.out.println(open);
	}

	private static boolean open(int x, int y) {
		Queue<int[]> q = new LinkedList<>();
		country = new LinkedList<>();
		q.add(new int[] {x, y});
		country.add(new int[] {x, y});
		
		count = 1;
		visited[x][y] = true;
		sum = map[x][y];
		
		while(!q.isEmpty()) {
			int[] cur = q.poll();
			for(int i=0;i<4;i++) {
				int nx = cur[0] + dx[i];
				int ny = cur[1] + dy[i];
				
				if(nx < 0 || nx >= N || ny < 0 || ny >= N)	continue;
				if(visited[nx][ny])	continue;
				if(Math.abs(map[cur[0]][cur[1]] - map[nx][ny]) >= L && Math.abs(map[cur[0]][cur[1]] - map[nx][ny]) <= R) {
					visited[nx][ny] = true;
					q.add(new int[] {nx, ny});
					sum += map[nx][ny];
					country.add(new int[] {nx, ny});
				}
			}
		}
		
		if(country.size() == 1)	return false;
		else {
			sum = sum / country.size();
			for(int[] node : country) {
				map[node[0]][node[1]] = sum;
			}
			return true;
		}
		
		
		
	}

}
