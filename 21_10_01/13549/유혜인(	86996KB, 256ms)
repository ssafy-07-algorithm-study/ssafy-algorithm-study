import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 백준_숨바꼭질3_2 {
	static class Point {
		int x;
		int cnt;
		
		public Point(int x, int cnt) {
			this.x =x;
			this.cnt = cnt;
		}
	}
	
	static int N,K;
	static int min;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		min = Integer.MAX_VALUE;
		bfs();
		System.out.println(min);
	}
	private static void bfs() {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(N, 0));
		boolean[] visited = new boolean[100001];
		
		while(!q.isEmpty()) {
			Point cur = q.poll();
			visited[cur.x] = true;
			
			if(cur.x == K) {
				min = Math.min(min, cur.cnt);
			}
			
			if(cur.x*2 <= 100000 && !visited[cur.x*2]) {
				q.add(new Point (2*cur.x, cur.cnt));
			}
			if(cur.x < 100000 && !visited[cur.x+1]) {
				q.add(new Point (cur.x+1, cur.cnt+1));
			}
			if(cur.x > 0 && !visited[cur.x-1]) { 
				q.add(new Point (cur.x-1, cur.cnt+1));
			}
		}
		
	}

}
