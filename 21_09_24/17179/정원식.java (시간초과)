

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_17179_케이크자르기 {
	
	static int max = Integer.MIN_VALUE;
	static int N, M, L;
	static int[] pos, div;
	
	public static void main(String[] args) throws IOException {		
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		
		pos = new int[M];
		div = new int[N];
		
		for(int i = 0; i < M; i++) {
			pos[i] = Integer.parseInt(br.readLine());
		}
		for(int i = 0; i < N; i++) {
			div[i] = Integer.parseInt(br.readLine());
		}
		
		for(int i = 0; i < N; i++) {
			max = Integer.MIN_VALUE;
			comb(0, 0, div[i], new int[div[i]]);
			System.out.println(max);
		}
		
		
		
	}
	
	public static void comb(int cnt, int start, int n, int[] selected) {
		
		if(cnt == n) {
			int minP = Integer.MAX_VALUE;
			int tmpLen = L;
			for(int i = n-1; i >= 0; i--) {
				minP = Math.min(minP, tmpLen - selected[i]);
				tmpLen = selected[i];
			}
			minP = Math.min(minP, tmpLen);
			
			max = Math.max(max, minP);
			
			return;
		}
		
		for(int i = start; i < M; i++) {
			selected[cnt] = pos[i];
			comb(cnt+1, i+1, n, selected);
		}
	}
}
