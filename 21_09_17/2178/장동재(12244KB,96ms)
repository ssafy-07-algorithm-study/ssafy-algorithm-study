package week07;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ2178 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken()), M = Integer.parseInt(st.nextToken());
		
		int[][] board = new int[N][M];
		
		for (int i = 0; i < N; i++) {
			char[] charArray = br.readLine().toCharArray();
			for (int j = 0; j < M; j++) board[i][j] = charArray[j] - '0';
		}
		
		bfs(board, N, M);
		
		System.out.println(board[N - 1][M - 1]);
	}
	
	public static void bfs (int[][] board, int N, int M) {
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int[] {0, 0});
		
		int[] dx = {-1, 1, 0, 0};
		int[] dy = {0, 0, -1, 1};
		
		while (!queue.isEmpty()) {
			int[] current = queue.poll();
			
			for (int d = 0; d < 4; d++) {
				int nextX = current[0] + dx[d];
				int nextY = current[1] + dy[d];
				
				if (outOfRange(N, M, nextX, nextY) || board[nextX][nextY] != 1) continue;
				board[nextX][nextY] = board[current[0]][current[1]] + 1;
				queue.offer(new int[] {nextX, nextY});
			}
		}
	}
	
	public static boolean outOfRange(int N, int M, int x, int y) {
		if (x < 0 || y < 0 || x == N || y == M) return true;
		return false;
	}
}
