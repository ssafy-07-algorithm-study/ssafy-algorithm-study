package com.ssafy.dp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class 백준_퇴사 {
	static int max;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		int[] term = new int[n+1];
		int[] price =  new int[n+1];
		int[] dp = new int[n+1];
		
		StringTokenizer st;
		
		for(int i=1;i<=n;i++) {
			st = new StringTokenizer(br.readLine());
			term[i] = Integer.parseInt(st.nextToken());
			price[i] = Integer.parseInt(st.nextToken());
		}
		max = Integer.MIN_VALUE;
		
		dfs(dp, term, price, n, 1, 0);
		System.out.println(max);
		
	}

	private static void dfs(int[] dp, int[] term, int[] price, int n, int cnt, int total) {
		if(cnt >= n+1) {
			max = Math.max(max, total);
			return;
		}
		
		if(cnt + term[cnt] <= n+1)	dfs(dp, term, price, n, cnt+term[cnt], total + price[cnt]);
		else	dfs(dp, term, price, n, cnt+term[cnt], total);
		dfs(dp, term, price, n, cnt+1, total);
	}

}
