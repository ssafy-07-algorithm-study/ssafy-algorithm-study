package s1_7576_토마토;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Tomato {
		int x;
		int y;
		int day;
		
		public Tomato(int x, int y, int day) {
			this.x = x;
			this.y = y;
			this.day = day;
		}
	}
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		int M = Integer.parseInt(st.nextToken());
		int N = Integer.parseInt(st.nextToken());
		int[][] board = new int [N][M];
		int[][] dydx = { {0,1}, {1,0}, {-1,0}, {0,-1} };
		boolean[][] visited = new boolean[N][M];
		Queue<Tomato> q = new LinkedList<>();
		int noEcCount = 0; // 안익은 토마토 개수
		int answer = -1;
		
		for (int n = 0; n < N; n++) {
			st = new StringTokenizer(br.readLine());
			for (int m = 0; m < M; m++) {
				board[n][m] = Integer.parseInt(st.nextToken());
				if (board[n][m] == 1)
					q.offer(new Tomato(m,n,0));
				else if (board[n][m] == 0) noEcCount++;
			}
		}
		
		if (noEcCount == 0) {
			System.out.println(0);
			return;
		}
		
		while(!q.isEmpty()) {
			Tomato currnet = q.poll();
			int x = currnet.x;
			int y = currnet.y;
			int day = currnet.day;

			if (board[y][x] == 0) noEcCount--;
			
			if (noEcCount == 0) {
				answer = day;
				break;
			}
			
			for (int i = 0; i < 4; i++) {
				int newY = y + dydx[i][0];
				int newX = x + dydx[i][1];
				
				if (newY < 0 || newY >= N || newX < 0 || newX >= M) continue;
				if (visited[newY][newX] == true || board[newY][newX] != 0) continue;
				visited[newY][newX] = true;
				q.offer(new Tomato(newX,newY,day+1));
			}
		}
		System.out.println(answer);
	}
}
