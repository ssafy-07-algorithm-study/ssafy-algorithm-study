package com.ssafy.day18;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 토마토_7576 {
	static int M, N;
	static int max;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		int[][] box = new int[N][M];
		ArrayList<int[]> tomato = new ArrayList<>();
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<M;j++) {
				int a = Integer.parseInt(st.nextToken());
				box[i][j] = a;
				if(a==1) {
					tomato.add(new int[] {i,j, 0});
				}
			}
		}
		
		
		bfs(box, tomato);
		
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {		
				if(box[i][j] == 0)	max = -1;	//하나라도 안익은 토마토가 있는 경우
			}
		}
		
		if(max == Integer.MIN_VALUE)	max = 0;	// 이미 다 익은 상태인 경우
		System.out.println(max);

	}

	private static void bfs(int[][] box, ArrayList<int[]> tomato) {
		int[] dx = {0,0,-1,1};
		int[] dy = {-1,1,0,0};
		max = Integer.MIN_VALUE;
		
		Queue<int[]> q = new LinkedList<>();
		for(int i=0;i<tomato.size();i++) {
			q.add(tomato.get(i));
		}
		
		while(!q.isEmpty()) {
			int[] cur = q.poll();
			int x = cur[0];
			int y = cur[1];
			int day = cur[2];
			
			for(int i=0;i<4;i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || nx >= N || ny < 0 || ny >=M)	continue;
				if(box[nx][ny] != 0)	continue;
				box[nx][ny] = day+1;
				max = Math.max(max, day+1);
				q.add(new int[] {nx, ny, day+1});
				
			}
		}
	}

}
